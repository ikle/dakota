#
# Lattice ECP5 PLC2 model, recostructed
#
# Copyright (c) 2021 Alexei A. Smekalkine <ikle@ikle.ru>
#
# SPDX-License-Identifier: BSD-2-Clause
#

.model ecp5_slice
.inputs  CE CLK LSR  FXA FXB FCI
.inputs  M0 A0 B0 C0 D0  M1 A1 B1 C1 D1
.outputs F0 Q0 OFX0          F1 Q1 OFX1  FCO

.param MUX_F0		0	# 0 = F0, 1 = 0FX0
.param MUX_F1		0	# 0 = F1, 1 = 0FX1

.param REG0.SD		0	# 1 = DI0, 0 = M0 — select data
.param REG1.SD		0	#

.param CEMUX		00	# {invert, gate}
.param CLKMUX		0	# invert CLK
.param LSRMUX		0	# inverl LSR
.param SRMODE		0	# async set/reset
.param REG0.LSRMODE	0	# preload from M0
.param REG1.LSRMODE	0	# preload from M1
.param REG0.REGSET	0	# 1 = reset
.param REG1.REGSET	0	# 1 = reset

.param K0.INIT		1111111111111111
.param K1.INIT		1111111111111111

.param INJECT1_0	0	# 0 = YES
.param INJECT1_1	0

.param MODE		000	# {RAM, CCU2H, CCU2L}

# logic, LUT4×2 and 2-bit carry lookahead

.subckt ecp_lut4  A=A0 B=B0 C=C0 D=D0 Y0=H0 F=L0
.cname K0
.param INIT K0.INIT

.subckt ecp_carry CI=FCI G=H0 P=F0 S=S0 CO=CO
.param INJECT1 INJECT1_0

.subckt ecp_lut4  A=A1 B=B1 C=C1 D=D1 Y0=H1 F=L1
.cname K1
.param INIT K1.INIT

.subckt ecp_carry CI=CO  G=H1 P=F1 S=S1 CO=FCO
.param INJECT1 INJECT1_1

# muxes

#.gate  mux41	S0=MODE[0] S1=MODE[2] A=L0 B=S0 C= D= Y=F0  # F{0,2,4,6}_SLICE
#.gate  mux41	S0=MODE[1] S1=MODE[2] A=L1 B=S0 C= D= Y=F1  # F{1,3,5,7}_SLICE

.gate  mux21	S=MODE[0] A=L0 B=S0 Y=F0  # F{0,2,4,6}_SLICE
.gate  mux21	S=MODE[1] A=L1 B=S0 Y=F1  # F{1,3,5,7}_SLICE

# LUT5, LUT6, LUT7

.gate  mux21	S=M0 A=F0  B=F1  Y=OFX0		# PFU F5{A,B,C,D}
.cname PFUMX
.gate  mux21	S=M1 A=FXA B=FXB Y=OFX1		# PFU FX{A,B,C,D}
.cname L6MUX21

# via local routing

.gate  mux21	S=MUX_F0 A=F0 B=OFX0 Y=DI0	# F5 → OFX0
.gate  mux21	S=MUX_F1 A=F1 B=OFX1 Y=DI1	# FX → OFX1

# registers

.gate  or	A=CEMUX[0] B=CE  Y=CEG
.gate  xor	A=CEMUX[1] B=CEG Y=CEI

.gate  xor	A=CLKMUX B=CLK  Y=CLKI
.gate  xor	A=LSRMUX B=LSR  Y=LSRI
.gate  and	A=SRMODE B=LSRI Y=ASR

.subckt ecp_reg   CE=CEI CLK=CLKI ASR=ASR SSR=LSRI  M=M0 D=DI0 Q=Q0
.cname REG0
.param SD	REG0.SD
.param LSRMODE	REG0.LSRMODE
.param REGSET	REG0.REGSET

.subckt ecp_reg   CE=CEI CLK=CLKI ASR=ASR SSR=LSRI  M=M1 D=DI1 Q=Q1
.cname REG1
.param SD	REG1.SD
.param LSRMODE	REG1.LSRMODE
.param REGSET	REG1.REGSET

.end

# ECP DFF

.model ecp_reg
.inputs  CE CLK ASR SSR M D
.outputs Q

.param SD	0	# 0 = M, 1 = D — select data
.param LSRMODE	0	# 1 = preload from M
.param REGSET	0	# 0 = set, 1 = reset

# select data

.gate  mux21	S=SD A=M B=D Y=DI

.gate  and	A=LSRMODE B=M Y=LD
.gate  mux21	S=SSR A=DI B=LD Y=V

.gate  nxor	A=REGSET B=V Y=FFD
.gate  dff	CE=CE CLK=CLK R=ASR D=FFD Q=FFQ
.gate  nxor	A=REGSET B=FFQ Y=Q

.end

# ECP LUT4

.model ecp_lut4
.inputs  A B C D
.outputs Y0 Y1 Y2 Y3 F

.param INIT	1111111111111111

.gate  mux41	S0=A S1=B A=INIT[0]  B=INIT[1]  C=INIT[2]  D=INIT[3]  Y=Y0
.gate  mux41	S0=A S1=B A=INIT[4]  B=INIT[5]  C=INIT[6]  D=INIT[7]  Y=Y1
.gate  mux41	S0=A S1=B A=INIT[8]  B=INIT[9]  C=INIT[10] D=INIT[11] Y=Y2
.gate  mux41	S0=A S1=B A=INIT[12] B=INIT[13] C=INIT[14] D=INIT[15] Y=Y3
.gate  mux41	S0=C S1=D A=Y0 B=Y1 C=Y2 D=Y3 Y=F

.end

# ECP Carry Unit

.model ecp_carry
.inputs  CI G P		# carry in, generate, propagate
.outputs S CO		# summa, carry out

.param INJECT1	0	# 0 = YES

.gate  and	A=INJECT1 B=G  Y=GG
.gate  mux21	S=P  A=GG B=CI Y=CO	# Co = P ? Ci : (G & INJECT1)

.gate  and	A=CI B=INJECT1 Y=CIG
.gate  xor	A=P  B=CIG Y=S		# S  = P ^ (Ci & INJECT1)

.end

# Gates

.model or
.inputs A B
.outputs Y
.names A B Y
1- 1
-1 1
.end

.model and
.inputs A B
.outputs Y
.names A B Y
11 1
.end

.model xor
.inputs A B
.outputs Y
.names A B Y
01 1
10 1
.end

.model nxor
.inputs A B
.outputs Y
.names A B Y
00 1
11 1
.end

.model mux41
.inputs S0 S1 A B C D
.outputs Y
.names S0 S1 A B C D Y
001--- 1
10-1-- 1
01--1- 1
11---1 1
.end

.model mux21
.inputs S A B
.outputs Y
.names S A B Y
01- 1
1-1 1
.end

.model dff
.inputs CE CLK R D
.outputs Q
.blackbox
.end
